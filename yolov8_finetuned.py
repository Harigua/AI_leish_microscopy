# -*- coding: utf-8 -*-
"""PapierDataNoAugYolov8FineTuned.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i92R3oVISNjem-5a8z69DI6tIkjZk_oM
"""

!pip install ultralytics matplotlib

from google.colab import drive
drive.mount('/content/drive')

img-path = '/content/drive/MyDrive/PapierData/DataSet'

from ultralytics import YOLO
import matplotlib.pyplot as plt

# Load the YOLOv8n model
model = YOLO("yolov8n.pt")
data_path = "/content/data-1/data.yaml"
# Train the model
results = model.train(
    data=data_path,
    epochs=500,
    batch=4,
    imgsz=1024,
    cos_lr=True,
    lr0=0.02,
    lrf=0.02,
    warmup_epochs=5.0,
    cls=2.0,
    plots=True
)

model = YOLO("/content/runs/detect/train/weights/best.pt")
metrics = model.val(
    data="/content/data-1/data.yaml",
    split="test"
)

import shutil

# Define source and destination directories
src_dir = '/content/runs'  # Replace with your output directory path
dst_dir = '/content/drive/My Drive/PapierData/NoAugYolov8/Results'  # Destination in Google Drive

# Copy the directory
shutil.copytree(src_dir, dst_dir)

from ultralytics import YOLO
from pathlib import Path


model = YOLO("/content/drive/MyDrive/PapierData/NoAugYolov8/Results/detect/train/weights/best.pt")

test_folder   = "/content/data-1/test/images"
output_folder = "/content/drive/MyDrive/PapierData/NoAugYolov8/TestResultWithLabels"


results = model.predict(
    source=test_folder,
    save=True,
    project=output_folder,
    name="inference",
    exist_ok=True
)

print(f"✅ Done! Results saved to {Path(output_folder)/'inference'}")

from ultralytics import YOLO
from pathlib import Path


model = YOLO("/content/drive/MyDrive/PapierData/NoAugYolov8/Results/detect/train/weights/best.pt")


test_folder   = "/content/data-1/test/images"
output_folder = "/content/drive/MyDrive/PapierData/NoAugYolov8/TestResultlabelsFree"


results = model.predict(
    source=test_folder,
    hide_labels=True,
    hide_conf=True,
    save=True,
    project=output_folder,
    name="inference",
    exist_ok=True
)

print("✅ Done! Boxes only; no labels/conf saved to:", Path(output_folder)/"inference")

import pandas as pd
import matplotlib.pyplot as plt
# Extract training and validation metrics
metrics = pd.read_csv('/content/runs/detect/train/results.csv')
train_loss = {
    "train/box_loss": metrics["train/box_loss"],
    "train/dfl_loss": metrics["train/dfl_loss"],
    "train/cls_loss": metrics["train/cls_loss"],
}
val_loss = {
    "val/box_loss": metrics["val/box_loss"],
    "val/dfl_loss": metrics["val/dfl_loss"],
    "val/cls_loss": metrics["val/cls_loss"],
}

# Plotting the graphs
plt.figure(figsize=(18, 12))

# Plot Box Loss (Training and Validation)
plt.subplot(3, 2, 1)
plt.plot(train_loss["train/box_loss"], label="Train Box Loss")
plt.plot(val_loss["val/box_loss"], label="Val Box Loss")
plt.title("Box Loss (Training vs Validation)")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

# Plot Object Loss (Training and Validation)
plt.subplot(3, 2, 2)
plt.plot(train_loss["train/dfl_loss"], label="Train dfl Loss")
plt.plot(val_loss["val/dfl_loss"], label="Val dfl Loss")
plt.title("dfl Loss (Training vs Validation)")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

# Plot Class Loss (Training and Validation)
plt.subplot(3, 2, 3)
plt.plot(train_loss["train/cls_loss"], label="Train Cls Loss")
plt.plot(val_loss["val/cls_loss"], label="Val Cls Loss")
plt.title("Class Loss (Training vs Validation)")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

# Plot Precision
plt.subplot(3, 2, 4)
plt.plot(metrics["metrics/precision(B)"], label="Precision")
plt.title("Precision")
plt.xlabel("Epoch")
plt.ylabel("Precision")
plt.legend()

# Plot Recall
plt.subplot(3, 2, 5)
plt.plot(metrics["metrics/recall(B)"], label="Recall")
plt.title("Recall")
plt.xlabel("Epoch")
plt.ylabel("Recall")
plt.legend()

# Plot mAP50
plt.subplot(3, 2, 6)
plt.plot(metrics["metrics/mAP50(B)"], label="mAP50")
plt.title("mAP50")
plt.xlabel("Epoch")
plt.ylabel("mAP50")
plt.legend()

# Show the plots
plt.tight_layout()
plt.savefig("training_metrics.png")
plt.show()